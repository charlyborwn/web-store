package pti.test.server.beans;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;
import pti.test.model.StoredProduct;
import pti.test.server.interfaces.CheckCreator;
import pti.test.server.interfaces.ProductEngine;

import javax.faces.bean.ManagedBean;
import java.io.ByteArrayOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The class is responsible for generating check information and writing
 * it to PDF document.
 *
 * @author Syrotyuk R.
 */
@ManagedBean
@RestController
public class CheckCreatorImpl implements CheckCreator {

    @Autowired
    private ProductEngine productEngine;

    @Autowired
    private Logger logger;

    private static Font bigFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font medFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);

    /**
     * Creates a byte array representing a PDF document.
     *
     * @return byte array representing a PDF document
     */
    @Override
    public byte[] createCheck(String name, String surname, String phone, String address, String street, String city,
                              String postalCode, String payment, String delivery,
                              List<StoredProduct> order, LocalDateTime date) {
        Document document = new Document();
        byte[] b = null;
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            PdfWriter.getInstance(document, baos);
            document.open();
            addMetaData(document, name, surname, date);
            addTitlePage(document, name, surname, date);
            addContent(document, name, surname, phone, address, street, city, postalCode, payment, delivery, order);
            document.close();
            b = baos.toByteArray();
            logger.info("Check document generated.");
        } catch (Exception e) {
            logger.error("Error was happened while generating check document: " + e.getMessage());
        }
        return b;
    }

    /**
     * Adds metadata to PDF.
     */
    private void addMetaData(Document document, String name, String surname, LocalDateTime date) {
        document.addTitle("Shopping_Check_" + name + "_" + surname + "_" + date.toString());
        document.addSubject("Shopping Check");
        document.addAuthor("MyCompany");
        document.addCreator("MyCompany");
    }

    /**
     * Adds title page to PDF.
     */
    private void addTitlePage(Document document, String name, String surname, LocalDateTime date) throws DocumentException {
        Paragraph preface = new Paragraph();
        addEmptyLine(preface, 1);
        preface.add(new Paragraph("Shopping Check MyCompany web-store", bigFont));
        addEmptyLine(preface, 1);
        preface.add(new Paragraph(
                "Generated by: " + surname + " " + name + ", " + date.format(DateTimeFormatter.ISO_DATE_TIME),
                smallBold));
        addEmptyLine(preface, 8);
        preface.add(new Paragraph(
                "This check is your shopping document.", smallBold));
        document.add(preface);
        document.newPage();
    }

    /**
     * Adds content information to PDF.
     */
    private void addContent(Document document, String name, String surname, String phone, String address,
                            String street, String city, String postalCode, String payment,
                            String delivery, List<StoredProduct> order) throws DocumentException {
        Anchor anchor = new Anchor("Order information", bigFont);
        anchor.setName("Order information");
        Chapter chapter = new Chapter(new Paragraph(anchor), 1);

        Paragraph paragraph = new Paragraph("Main buyer information", medFont);
        Section section = chapter.addSection(paragraph);
        section.add(new Paragraph("Name: " + surname + " " + name));
        section.add(new Paragraph("Phone: " + phone));

        paragraph = new Paragraph("Address information", medFont);
        section = chapter.addSection(paragraph);
        section.add(new Paragraph("City: " + city));
        section.add(new Paragraph("Street: " + street));
        section.add(new Paragraph("Address: " + address));
        section.add(new Paragraph("Postal code: " + postalCode));

        paragraph = new Paragraph("Delivering information and payment", medFont);
        section = chapter.addSection(paragraph);
        section.add(new Paragraph("Delivery: " + delivery));
        section.add(new Paragraph("Payment: " + payment));
        section.add(new Paragraph(" "));

        createTable(section, order);

        section.add(new Paragraph(" "));

        paragraph = new Paragraph("Summary price", medFont);
        section = chapter.addSection(paragraph);
        double price = order.stream().mapToDouble(x -> x.getCount() * productEngine.findByIpk(x.getIpk()).getPrice()).sum();
        section.add(new Paragraph("Summary price: " + price + "€"));
        section.add(new Paragraph("Date: " + LocalDateTime.now()
                .format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))));

        document.add(chapter);

    }

    /**
     * Draws the table in PDF.
     */
    private void createTable(Section subCatPart, List<StoredProduct> order) throws BadElementException {
        PdfPTable table = new PdfPTable(5);

        PdfPCell cell = new PdfPCell(new Phrase("ID"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Product"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Count"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Price"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        cell = new PdfPCell(new Phrase("Summary"));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(cell);

        table.setHeaderRows(1);

        for (StoredProduct p : order) {
            table.addCell(String.valueOf(p.getIpk()));
            table.addCell(productEngine.findByIpk(p.getIpk()).getName());
            table.addCell(String.valueOf(p.getCount()));
            table.addCell(String.valueOf(productEngine.findByIpk(p.getIpk()).getPrice()) + "€");
            table.addCell(String.valueOf(productEngine.findByIpk(p.getIpk()).getPrice() * p.getCount()) + "€");
        }

        subCatPart.add(table);

    }

    /**
     * Adds an empty line in PDF.
     */
    private void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

}
